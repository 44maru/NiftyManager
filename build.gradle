/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'java'

sourceCompatibility = 9
targetCompatibility = 9


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

def dependenciesCopyTargetDirName = 'dependencies'

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    compile 'commons-codec:commons-codec:1.9'
    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    compile 'org.apache.httpcomponents:httpcore:4.4.10'
    compile 'commons-logging:commons-logging:1.2'
    compile 'xpp3:xpp3_min:1.1.4c'
    compile 'com.thoughtworks.xstream:xstream:1.3.1'
    compile 'net.sf.opencsv:opencsv:2.3'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.projectlombok:lombok:1.16.18'
    compile files('libs/nifty-cloud-api-lib.jar')
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

jar {
	manifest {
        attributes 'Implementation-Title': 'Mychael Style Tools', 'Implementation-Version': 1.0
        attributes "Main-Class" : "com.nwt.main.NiftyManagerMain"
  	}
	from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

task deleteDependencies(type: Delete) {
  delete dependenciesCopyTargetDirName
}

// 郢晁ｼ斐＜郢ｧ�ｽ､郢晢ｽｫ邵ｺ�ｽｮ郢ｧ�ｽｳ郢晄鱒�ｿｽ�ｽｼ陷茨ｿｽ(郢ｧ�ｽｫ郢晢ｽｬ郢晢ｽｳ郢晏現ﾂｰ郢ｧ蟲ｨ�ｿｽ�ｽｮ騾ｶ�ｽｸ陝�ｽｾPATH)
def dependJarCopyTo = 'jar'
// 郢ｧ�ｽｳ郢晄鱒�ｿｽ�ｽｼ陷亥現竊鍋ｸｺ繧��ｽ狗ｹ晁ｼ斐＜郢ｧ�ｽ､郢晢ｽｫ郢ｧ蛛ｵ�ｼ樒ｸｺ�ｽ｣邵ｺ貅假ｽ楢恆莨∝求
task delDependJar {
	doLast {
		delete dependJarCopyTo
	}
}
// 關捺剌�ｽｭ蛟･笘�郢ｧ荵斟帷ｹｧ�ｽ､郢晄じﾎ帷ｹ晢ｽｪjar郢ｧ蜻域ｬ�陞ｳ螢ｹ�ｼ�邵ｺ貅倥Ι郢ｧ�ｽ｣郢晢ｽｬ郢ｧ�ｽｯ郢晏現ﾎ懃ｸｺ�ｽｫ郢ｧ�ｽｳ郢晄鱒�ｿｽ�ｽｼ邵ｺ蜷ｶ�ｽ�
task getDependJar(dependsOn: delDependJar) {
    doLast {
        configurations.compile.each {
            def fromJarFile = it.absolutePath
            copy {
                from fromJarFile
                into dependJarCopyTo
            }
        }
        println "----- 闔会ｽ･闕ｳ荵晢ｿｽ�ｽｮjar郢晁ｼ斐＜郢ｧ�ｽ､郢晢ｽｫ郢ｧ雋槫徐陟募干�ｼ�邵ｺ�ｽｾ邵ｺ蜉ｱ笳� -----"
        FileCollection copyFiles = files { file(dependJarCopyTo).listFiles() }
        copyFiles.each {File file -> println file.name}
    }
}